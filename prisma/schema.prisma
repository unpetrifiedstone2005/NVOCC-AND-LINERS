generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ─────────────────────────────────────────────────────────────────────────────
/// ENUMS
/// ─────────────────────────────────────────────────────────────────────────────

enum Role {
  ADMIN
  OPERATOR
  CLIENT
}

enum ContainerGroup {
  DRY_STANDARD   // 20′ = 1 TEU, 40′ dry = 2 TEU
  DRY_HC         // 40′ high-cube = 2 TEU
  REEFER         // refrigerated (map to 1 or 2 TEU as needed)
  OPEN_TOP       // open-top / flats (map to 2 TEU)
  // …etc.
}

enum Leg {
  EXPORT
  IMPORT
}

enum DeliveryType {
  door
  terminal
}

enum QuotationStatus {
  draft
  submitted
  pending_response
  responded
  accepted
  rejected
  booked
  expired
  cancelled
}

enum RefundStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum WeightUnit {
  kg
  lb
  t
}

enum VolumeUnit {
  m3
  ft3
  l
}

enum ContainerStatus {
  AVAILABLE
  ALLOCATED
  IN_TRANSIT
  MAINTENANCE
  LOST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}


enum SurchargeType {
  // FREIGHT & OCEAN-LEG
  BASE_FREIGHT
  BUNKER_ADJUSTMENT_FACTOR
  CURRENCY_ADJUSTMENT_FACTOR
  PEAK_SEASON_SURCHARGE
  WAR_RISK_SURCHARGE
  EMERGENCY_RISK_SURCHARGE

  // PORT / TERMINAL
  TERMINAL_HANDLING_CHARGE
  SECURITY_ISPS_SURCHARGE
  PORT_CONGESTION_SURCHARGE

  // SPECIAL CARGO
  DANGEROUS_GOODS_SURCHARGE
  OVERWEIGHT_OUT_OF_GAUGE_CHARGE
  REEFER_SURCHARGE
  DECLARED_VALUE_SURCHARGE

  // ADMIN / PAPERWORK
  DOCUMENTATION_ADMIN_FEE
  SIGNATURE_SURCHARGE
  ADDRESS_CORRECTION_SURCHARGE

  // DELIVERY / LAST MILE
  RESIDENTIAL_DELIVERY_SURCHARGE
  DELIVERY_AREA_SURCHARGE
  SATURDAY_DELIVERY_SURCHARGE

  // MISC
  ADDITIONAL_HANDLING_SURCHARGE
}

enum SurchargeScope {
  FREIGHT       // ocean-leg surcharges (BAF, CAF, PSS…)
  ORIGIN        // terminal/handling at loading port
  DESTINATION   // terminal/handling at discharge port
  DOCUMENTAION  // admin/paperwork charges (documentation, CRO fees…)
}

enum DeliveryOrderRecipientType {
  TRUCKER
  CONSIGNEE
  OTHER
}


enum DeliveryOrderStatus {
  PENDING
  ISSUED
  COMPLETED
  CANCELLED
}


enum DeclarationType {
  CUSTOMS
  DG
}

enum DeclarationStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum SnapshotType {
  CONTAINER
  VESSEL
}

enum DraftType {
  BL    // Bill of Lading
  SWB   // Sea Waybill
}

enum DraftStatus {
  OPEN                // Open for review
  CORRECTION_SENT     // Corrections requested by user
  APPROVED            // Approved by user
  RELEASED            // Released to carrier
  EXCEEDS_CAPACITY    // Cargo exceeds booking limits, price review needed
  PRICE_CHANGE_PENDING // Other price-affecting change (e.g. route/service)
}

enum CustomsReferenceType {
  INVOICE
  PACKING_LIST
  // ...other types as needed
}

enum LegType {
  ORIGIN_HAULAGE
  OCEAN_LEG
  DEST_HAULAGE
}




/// ─────────────────────────────────────────────────────────────────────────────
/// MODELS
/// ─────────────────────────────────────────────────────────────────────────────

model User {
  id             String               @id @default(uuid())
  email          String               @unique
  hashedPassword String
  role           Role                 @default(CLIENT)
  firstName      String
  lastName       String
  countryCode    String               @db.Char(2)
  phoneNumber    String
  companyName    String?
  vatNumber      String?
  streetAddress  String
  city           String
  postalCode     String
  country        String
  createdAt      DateTime             @default(now())

  bLDrafts    BLDraft[] @relation("BLDraftCreatedBy")
  quotations     Quotation[]
  bookings       Booking[]
  invoices       Invoice[]
  activityLogs   ActivityLog[]
  notifications  Notification[]
  accountBalance AccountBalance?

  // back-relations for BL drafts

  commentsMade           BLDraftComment[] @relation("DraftCommenter")

  // Back-relation for Declaration
  declarations           Declaration[]    @relation("UserDeclarations")
  siVersions             SIVersion[] @relation("UserSIVersions")

  @@map("user")
}

model DetentionTerm {
  id             String   @id @default(uuid())
  depotId        String?  // optional: null = global default
  carrierId      String?  // optional: per‐carrier override
  freeDays       Int      // e.g. 3 free days
  ratePerDay     Decimal  @db.Decimal(12,2)  // e.g. 50.00
  currency       String   @default("USD")
  effectiveFrom  DateTime @default(now())
  effectiveTo    DateTime? // if you need to version terms
  cros           ContainerReleaseOrder[]
}



model CROContainer {
  id            String                   @id @default(uuid())
  croId         String
  cro           ContainerReleaseOrder    @relation(fields: [croId], references: [id], onDelete: Cascade)

  containerId   String
  container     Container                @relation(fields: [containerId], references: [id])

  // Actual pickup time recorded by depot/operator
  handedOverAt  DateTime                 @default(now())
  vgmTransmissions VGMTransmission[]  @relation("CROContainerToVGM")
}


model ContainerReleaseOrder {
  id                 String          @id @default(uuid())
  bookingId          String          @unique
  booking     Booking  @relation("BookingToCRO", fields: [bookingId], references: [id], onDelete: Cascade)

  // Who may pick it up: e.g. "TRUCKER" or "SHIPPER"
  releasedToType     String
  releasedToId       String

  // Depot and timing
  depotUnlocode      String?
  issuedAt           DateTime        @default(now())

  // Free‐day window (snapshot from the selected DetentionTerm)
  freeDays           Int

  // Link to the term you used when you created this CRO
  detentionTermId    String?
  detentionTerm      DetentionTerm?  @relation(fields: [detentionTermId], references: [id])

  ratePerDay         Decimal         @db.Decimal(12,2)  
  currency           String          @default("USD")

  // Attached files (CRO PDFs, scans, etc.)
  documents          Document[]      @relation("CRODocs")

  // Which physical containers were released
  releasedContainers CROContainer[]

  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}



model Quotation {
  id                  String               @id @default(uuid())
  userId              String
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Location values as strings, not strict FKs
  startLocation       String               // port UNLOCODE or door address
  startIsPort         Boolean  @default(true)
  endLocation         String
  endIsPort           Boolean  @default(true)

  pickupType          DeliveryType
  deliveryType        DeliveryType

  validFrom           DateTime
  commodity           String
  shipperOwned        Boolean
  multipleTypes       Boolean
  offer               Json?
  status              QuotationStatus      @default(accepted)

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt



  quotationContainers QuotationContainer[]
  quotationRoutings   QuotationRouting[]
  booking             Booking?
  quotationLines      QuotationLine[]
}


model QuotationLine {
  id             String     @id @default(uuid())
  quotationId    String
  quotation      Quotation  @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  description    String     // e.g. "40HC base freight" or "THC (40HC)"
  amount         Decimal    @db.Decimal(12,2)  // per-container rate snapshot
  reference      String?    // e.g. "BASE_FREIGHT" or surchargeDefId
  glCode         String?    // e.g. "4001-FRT"
  costCenter     String?    // e.g. "Freight" or "Surcharge"

  createdAt      DateTime   @default(now())
}

model Service {
  id           String   @id @default(uuid())
  code         String   @unique
  name         String
  description  String
  ratePerUnit  Decimal  @db.Decimal(12,2)
  currency     String
  isRecommended Boolean @default(false)
  createdAt    DateTime @default(now())

  quotationContainerServices QuotationContainerService[]
}

model QuotationContainer {
  id                  String                        @id @default(uuid())
  quotationId         String

  containerTypeIsoCode String         // FK
  containerType       ContainerType    @relation(fields: [containerTypeIsoCode], references: [isoCode])
  qty                 Int
  weightPerContainer   Decimal
  weightUnit          String

  quotation           Quotation                     @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationContainerServices            QuotationContainerService[]   // ✅ New line
}

model QuotationContainerService {
  id                     String             @id @default(uuid())
  quotationContainerId   String
  serviceId              String
  qty                    Int                @default(1)

  ratePerUnitSnapshot   Decimal  @db.Decimal(12,2)
  currencySnapshot      String

  quotationContainer     QuotationContainer @relation(fields: [quotationContainerId], references: [id], onDelete: Cascade)
  service                Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([quotationContainerId, serviceId])
}


/// ─────────────────────────────────────────────────────────
/// 2. Carrier Schedule & Voyages
/// ─────────────────────────────────────────────────────────
model ServiceSchedule {
  code        String     @id
  description String?
  voyages     Voyage[]
  tariffs     Tariff[]

  quotationRoutings QuotationRouting[] @relation("ServiceToQuotationRouting")
}

model Voyage {
  id           String           @id @default(uuid())
  serviceCode  String
  voyageNumber String?          // “245N”, “006W” …
  departure    DateTime         // first port’s ETD
  arrival      DateTime?        // last port’s ETA
  portCalls    PortCall[]
  
  quotationRoutings QuotationRouting[] @relation("VoyageToQuotationRouting")
  service      ServiceSchedule  @relation(fields: [serviceCode], references: [code], onDelete: Cascade)

  @@index([serviceCode])
  @@index([departure])
  @@index([arrival])
}

model PortCall {
  id           String   @id @default(uuid())
  voyageId     String
  portCode     String   // UN/LOCODE
  order        Int      // 1 = first call, 2 = second, …
  etd          DateTime?// estimated time of departure at this port
  eta          DateTime?// estimated time of arrival at this port
  mode         String?  // “SEA”, “RAIL” etc (if multimodal)
  vesselName   String?  // optional override (if different from Voyage-level)

  voyage       Voyage   @relation(fields: [voyageId], references: [id], onDelete: Cascade)

  @@index([portCode])
  @@index([voyageId, order])
  @@index([etd])
  @@index([eta])
}


model QuotationRouting {
  id            String           @id @default(uuid())
  quotationId   String
  pol           String           // should match Quotation.startLocation
  pod           String           // should match Quotation.endLocation
  serviceCode   String
  voyageId      String
  importHaulage DeliveryType     // e.g. TERMINAL or DOOR
  commodity     String           // e.g., "FAK" or "DG"


  // relations
  quotation     Quotation        @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  voyage        Voyage           @relation("VoyageToQuotationRouting", fields: [voyageId], references: [id], onDelete: Cascade)
  service       ServiceSchedule  @relation("ServiceToQuotationRouting", fields: [serviceCode], references: [code], onDelete: Cascade)

  @@index([quotationId])
}

model Booking {
  id                  String                  @id @default(uuid())
  userId              String
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  quotationId         String                  @unique
  quotation           Quotation               @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  // Contact & Reference
  customerName        String?
  contactReference    String?
  contactName         String?
  contactPhone        String?
  contactEmail        String?

  // Routing & Schedule
  startLocation       String
  departureDate       DateTime?
  vgmCutOffAt         DateTime?               // e.g. departureDate minus 4h
  siCutOffAt          DateTime?               // e.g. departureDate minus 48h
  blCutOffAt          DateTime?               // e.g. departureDate minus 24h
  pickupOption        DeliveryType
  via1                String?
  via2                String?
  endLocation         String
  arrivalDate         DateTime?
  deliveryOption      DeliveryType
  exportMOT           String?
  importMOT           String?
  optimizeReefer      Boolean                 @default(false)
  selectedRoutingId   String?

  // Cargo & Equipment
  containers          BookingContainer[]

  // Customs & Documentation
  customsReferences   CustomsReference[]
  bolCount            Int?
  exportFiling        Boolean                 @default(false)
  filingBy            String?
  remarks             String?

  // ──────────────────────────────────────────────────────
  // Back-relations for downstream workflows
  // ──────────────────────────────────────────────────────

  /// The one‐and-only CRO for this booking (origin container release)
  containerReleaseOrder ContainerReleaseOrder?   @relation("BookingToCRO")

  /// All VGM entries submitted against this booking
  vgmTransmissions VGMTransmission[] @relation("BookingToVGM")

  /// The Shipping Instruction you’ll submit
  shippingInstruction ShippingInstruction?

  /// All B/L drafts & amendments for this booking
  blDrafts          BLDraft[]          @relation("BookingToBLDraft")

  status              BookingStatus          @default(PENDING)
  createdAt           DateTime                @default(now())
  egm                 EGM?        @relation("BookingToEGM")

  //import
  igm                 IGM?        @relation("BookingToIGM")
  arrivalNotices      ArrivalNotice[] @relation("BookingToArrivalNotice")
  importDeclarations   ImportDeclaration[]    @relation("BookingToImportDeclaration")
  deliveryOrder DeliveryOrder?  @relation("BookingToDO")

  
}




model BookingContainer {
  id             String     @id @default(uuid())
  bookingId      String
  booking        Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  type           String     // e.g. "40HC", "20GP"
  qty            Int
  shipperOwned   Boolean    @default(false)
  releaseDate    DateTime?
  cargo    BookingCargo[]

}

model BookingCargo {
  id                   String           @id @default(uuid())
  bookingContainerId   String
  bookingContainer     BookingContainer @relation(fields: [bookingContainerId], references: [id], onDelete: Cascade)

  description          String           // “FAK” or whatever the user typed
  hsCode               String           // HS code field
  cargoWeight          Decimal          @db.Decimal(12,2)  // single weight field
  weightUnit           String           // “kg” or “lb”
  dgDetails            String?          // whatever they select in the DG-dropdown (or null)

  createdAt            DateTime         @default(now())
}

model CustomsReference {
  id         String               @id @default(uuid())
  bookingId  String
  booking    Booking              @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  type       CustomsReferenceType
  reference  String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
}

model Container {
  id                  String            @id @default(uuid())
  containerNo         String            @unique
  bicCode             String? 
  containerTypeIsoCode String
  containerType       ContainerType     @relation(fields: [containerTypeIsoCode], references: [isoCode])

  ownership           String?
  companyOrigin       String?
  manufacturer        String?
  customsApproval     String?
  description         String?

  status              ContainerStatus   @default(AVAILABLE)
  currentDepot        String?
  lastUsedAt          DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  cscPlateUrl         String?
  certificationExpiry DateTime?
  foodGrade           Boolean?

  croContainers       CROContainer[]
  allocations         Allocation[]
  events              ContainerEvent[]
  demurrageAlerts     DemurrageAlert[]
}


model VGMTransmission {
  id               String        @id @default(uuid())

  bookingId        String
  booking        Booking  @relation("BookingToVGM", fields: [bookingId], references: [id], onDelete: Cascade)

  croContainerId   String
  croContainer     CROContainer  @relation("CROContainerToVGM", fields: [croContainerId], references: [id], onDelete: Cascade)

  // ────────────────────────────────────────────────────────────────
  // Required fields
  // ────────────────────────────────────────────────────────────────
  verifiedWeight     Float
  providerSignature  String
  shipperCompany     String

  // ────────────────────────────────────────────────────────────────
  // Optional Details
  // ────────────────────────────────────────────────────────────────
  determinationDate  DateTime?
  solasMethod        String?
  solasCertificate   String?
  country            String?

  // ────────────────────────────────────────────────────────────────
  // Internal
  // ────────────────────────────────────────────────────────────────
  status             String        @default("PENDING")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@unique([bookingId, croContainerId])
  @@index([bookingId])
  @@index([croContainerId])
} 



model SiCargo {
  id                   String     @id @default(uuid())
  shippingInstructionContainerId   String
  container                         ShippingInstructionContainer  @relation(fields: [shippingInstructionContainerId], references: [id], onDelete: Cascade)


  hsCode               String
  description          String
  grossWeight          Decimal?   @db.Decimal(10,2)
  netWeight            Decimal?   @db.Decimal(10,2)
  noOfPackages         Int?

  isDangerous          Boolean    @default(false)
  unNumber             String?
  imoClass             String?
  packingGroup         String?

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt


  declarationLines    DeclarationLine[] @relation("CargoToDeclarationLine")
}

model Allocation {
  id               String     @id @default(uuid())
  bookingId        String

  containerId      String
  container        Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  allocatedAt      DateTime   @default(now())
  releasedAt       DateTime?
  sealNumber       String?
}

model ContainerEvent {
  id            String     @id @default(uuid())
  containerId   String
  container     Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  eventTime     DateTime
  eventType     String
  portUnlocode  String?
  port          Port?      @relation("portEvents", fields: [portUnlocode], references: [unlocode])
  portName      String?
  description   String?
  sourceSystem  String
  fetchedAt     DateTime   @default(now())

  @@map("container_event")
}

model Vessel {
  id         String            @id @default(uuid())
  imo        String?           @unique
  mmsi       String?           @unique
  name       String
  schedules  VesselSchedule[]
  carrierId  String?
}

model VesselSchedule {
  id            String   @id @default(uuid())
  vesselId      String
  vessel        Vessel   @relation(fields: [vesselId], references: [id], onDelete: Cascade)
  portOfCallId  String
  portOfCall    Port     @relation(fields: [portOfCallId], references: [id])
  voyageNumber  String
  etd           DateTime?
  eta           DateTime?
  status        String?
  operationType String
  fetchedAt     DateTime @default(now())
  @@unique([vesselId, portOfCallId, voyageNumber, operationType, etd])
}


model BankAccount {
  id             String    @id @default(uuid())
  accountName    String
  bankName       String
  accountNumber  String
  branchName     String
  ifsc           String?   // <-- Added IFSC code for Indian payments
  iban           String?
  swift          String?
  bankAddress    String?
  currency       String
  isActive       Boolean   @default(true)
  invoices       Invoice[] // Opposite relation
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Invoice {
  id            String         @id @default(uuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId     String         
  totalAmount   Decimal        @db.Decimal(12,2)
  issuedDate    DateTime       @default(now()) @map("issued_date")
  dueDate       DateTime       @map("due_date")
  status        InvoiceStatus  @default(PENDING)
  leg           Leg
  description   String?

  bankAccountId String
  bankAccount   BankAccount    @relation(fields: [bankAccountId], references: [id])
  documents     Document[]
  payments      Payment[]

  lines         InvoiceLine[]
  @@unique([bookingId, leg])
}

model InvoiceLine {
  id           String    @id @default(uuid())
  invoiceId    String
  invoice      Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  description  String
  amount       Decimal   @db.Decimal(12,2)
  reference    String?
  glCode       String?
  costCenter   String?

  createdAt    DateTime  @default(now())
}



model DemurrageAlert {
  id           String     @id @default(uuid())
  containerId  String
  container    Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  alertTime    DateTime   @default(now()) @map("alert_time")
  message      String
  resolved     Boolean    @default(false)
}

model ActivityLog {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     String
  metadata   Json?
  createdAt  DateTime  @default(now()) @map("created_at")
}

model APISnapshot {
  id         String       @id @default(uuid())
  type       SnapshotType
  reference  String
  data       Json
  fetchedAt  DateTime     @default(now()) @map("fetched_at")
}

model Port {
  id           String   @id @default(uuid())
  unlocode     String   @unique
  name         String
  city         String
  country      String
  latitude     Float?
  longitude    Float?
  createdAt    DateTime @default(now())

  vesselSchedules            VesselSchedule[]
  containerEvents            ContainerEvent[]  @relation("portEvents")
}


model ContainerType {
  isoCode       String           @id  // e.g., "40HC-DRY", "40RFR"
  name             String             @unique              // e.g., "40HC - DRY"
  
  lengthMm         Int
  widthMm          Int
  heightMm         Int
  maxStackWeightKg Int
  tareWeightKg     Int
  maxGrossWeightKg Int

  // NEW: assign each type to a broad bucket and TEU multiplier
  group            ContainerGroup     // e.g. DRY_STANDARD, REEFER, OPEN_TOP
  teuFactor        Float              // e.g. 1.0 for 20', 2.0 for 40'

  containers            Container[]
  surchargeRates        SurchargeRate[]       @relation("TypeToRates")
  quotationContainers   QuotationContainer[]
}

model Tariff {
  serviceCode    String            // e.g. "WAX"
  pol            String            // port-of-loading UN/LOCODE
  pod            String            // port-of-discharge UN/LOCODE
  commodity      String            // e.g. "FAK"
  group          ContainerGroup    // one of the four buckets
  ratePerTeu     Decimal           @db.Decimal(12,2)  // USD per TEU

  validFrom      DateTime
  validTo        DateTime?

  service        ServiceSchedule   @relation(fields: [serviceCode], references: [code], onDelete: Cascade)

  @@id([serviceCode, pol, pod, commodity, group, validFrom])
}


model SurchargeDef {
  id            String           @id @default(uuid())
  name          String           // e.g. "Fuel Surcharge Origin Land"
  scope         SurchargeScope   // ORIGIN | FREIGHT | DESTINATION
  portCode      String?          // for ORIGIN & DESTINATION
  serviceCode   String?          // for FREIGHT
  isPercentage  Boolean          @default(false)
  currency      String           @default("USD")
  effectiveFrom DateTime         @default(now())
  effectiveTo   DateTime?        // null = open‐ended

  rates         SurchargeRate[]  @relation("DefToRates")
  @@index([scope, portCode])
  @@index([scope, serviceCode])
}


model SurchargeRate {
  id              String        @id @default(uuid())
  surchargeDefId  String
  surchargeDef    SurchargeDef  @relation("DefToRates", fields: [surchargeDefId], references: [id], onDelete: Cascade)

  containerTypeIsoCode String
  containerType   ContainerType @relation("TypeToRates", fields: [containerTypeIsoCode], references: [isoCode])

  amount          Decimal       @db.Decimal(12,2)  // flat or %, see parent.isPercentage

  @@index([surchargeDefId, containerTypeIsoCode])
}





model Document {
  id                        String      @id @default(uuid())
  type                      String
  url                       String
  uploadedAt                DateTime    @default(now())
  bookingId                 String?
  quotationId               String?
  invoiceId                 String?
  declarationId             String?
  shippingInstructionId     String?
  croId                      String? 


  invoice                    Invoice?    @relation(fields: [invoiceId], references: [id])
  declaration                Declaration? @relation("DeclarationDocuments", fields: [declarationId], references: [id])
  shippingInstruction        ShippingInstruction? @relation("ShippingInstructionDocs", fields: [shippingInstructionId], references: [id])
  bldraft                    BLDraft?    // Back relation (optional)
  containerReleaseOrder      ContainerReleaseOrder?       @relation("CRODocs", fields: [croId], references: [id])

  /// ← New FK column for DeliveryOrder
  deliveryOrderId String?      
  /// ← And the back-relation
  deliveryOrder   DeliveryOrder? @relation("DO_Docs", fields: [deliveryOrderId], references: [id])
}


model ShippingInstruction {
  id                String                         @id @default(uuid())
  bookingId         String                         @unique
  booking           Booking                        @relation(fields: [bookingId], references: [id])

  consignee         String
  notifyParty       String?
  vesselName        String?
  voyageNumber      String?
  placeOfReceipt    String?
  portOfLoading     String?
  portOfDischarge   String?
  finalDestination  String?
  specialRemarks    String?

  createdAt         DateTime                       @default(now())
  updatedAt         DateTime                       @updatedAt

  /// snapshot of the final cargo lines for this SI


  /// per-container info (container numbers, seals…) 
  containers        ShippingInstructionContainer[]

  /// any packing lists attached to this SI
  packingLists      PackingList[]                  @relation("PackingListToSI")

  /// any generic documents (e.g. PDFs) attached
  documents         Document[]                     @relation("ShippingInstructionDocs")
  declarations      Declaration[] @relation("SIToDeclaration")
  versions          SIVersion[]   @relation("SIToVersions")
  
}

model SIVersion {
  id                     String               @id @default(uuid())
  shippingInstructionId  String
  shippingInstruction    ShippingInstruction  @relation("SIToVersions", fields: [shippingInstructionId], references: [id], onDelete: Cascade)

  createdAt              DateTime             @default(now())
  createdById            String?
  createdBy              User?                @relation("UserSIVersions", fields: [createdById], references: [id])

  data                   Json                 // snapshot of the SI + its cargo & containers
  note                   String?              // optional comment on why it was versioned
}


model ShippingInstructionContainer {
  id                     String                @id @default(uuid())
  shippingInstructionId  String
  shippingInstruction    ShippingInstruction   @relation(fields: [shippingInstructionId], references: [id], onDelete: Cascade)

  containerNumber        String?               // e.g. “HLCU1234567”
  seals                  String[]              @default([])
  marksAndNumbers        String?
  hsCode                 String?

  cargoes                SiCargo[]
}

model PackingList {
  id                    String    @id @default(uuid())
  shippingInstructionId String
  shippingInstruction   ShippingInstruction  @relation("PackingListToSI", fields: [shippingInstructionId], references: [id])
  createdAt             DateTime  @default(now())

  items PackingListItem[]
}

model PackingListItem {
  id           String   @id @default(uuid())
  packingListId String
  packingList  PackingList @relation(fields: [packingListId], references: [id], onDelete: Cascade)

  hsCode       String
  description  String
  quantity     Int
  netWeight    Float?
  grossWeight  Float?
  marksAndNumbers String?
}

model EGM {
  /// Primary key
  id               String      @id @default(uuid())

  /// Link back to your Booking
  bookingId        String      @unique
  booking          Booking     @relation("BookingToEGM", fields: [bookingId], references: [id], onDelete: Cascade)

  blDraftVersionId   String           @unique
  blDraftVersion     BLDraftVersion   @relation(fields: [blDraftVersionId], references: [id])



  /// Basic voyage info
  vesselName       String?
  voyageNumber     String?
  portOfLoading    String
  portOfDischarge  String

  /// When the manifest was filed
  manifestDate     DateTime    @default(now())

  /// Raw or parsed manifest details if you prefer a single field
  data             Json

  /// Timestamps
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  /// (optional) expand into a child table if you want one row per container
  containers       EGMContainer[]
}

model EGMContainer {
  id              String   @id @default(uuid())
  egmId           String
  egm             EGM      @relation(fields: [egmId], references: [id], onDelete: Cascade)

  containerNo     String
  hsCode          String
  grossWeight     Decimal  @db.Decimal(12,2)
  netWeight       Decimal? @db.Decimal(12,2)
  noOfPackages    Int

  createdAt       DateTime @default(now())
}


model IGM {
  id               String     @id @default(uuid())
  bookingId        String     @unique
  booking          Booking    @relation("BookingToIGM", fields: [bookingId], references: [id], onDelete: Cascade)

  vesselName       String?
  voyageNumber     String?
  portOfLoading    String     // original load port UN/LOCODE
  portOfDischarge  String     // destination port UN/LOCODE

  manifestDate     DateTime   @default(now())
  data             Json       // your full manifest JSON

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}


model ArrivalNotice {
  id         String    @id @default(uuid())
  bookingId  String
  booking Booking @relation("BookingToArrivalNotice", fields: [bookingId], references: [id], onDelete: Cascade)

  method     String    // "EMAIL" | "SMS" | "WEBHOOK"
  payload    Json      // e.g. { subject, body, links… }
  status     String    @default("PENDING") // you can track "PENDING"|"SENT"|"FAILED"
  error      String?   // optional error message on failure

  sentAt     DateTime  @default(now())
  createdAt  DateTime  @default(now())
}

model ImportDeclaration {
  id           String    @id @default(uuid())
  bookingId    String
  booking      Booking   @relation("BookingToImportDeclaration", fields: [bookingId], references: [id], onDelete: Cascade)

  data         Json      // the broker’s full declaration JSON or XML
  status       String    @default("PENDING")  // e.g. PENDING, SUBMITTED, APPROVED, REJECTED
  filedAt      DateTime?                       // when broker actually filed
  error        String?                         // any error message

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model DeliveryOrder {
  id              String                        @id @default(uuid())
  bookingId       String                        @unique
   booking          Booking       @relation("BookingToDO", fields: [bookingId], references: [id], onDelete: Cascade)

  recipientType   DeliveryOrderRecipientType
  recipientId     String                        // e.g. your YMS id, consignee code, etc.
  deliveryLocation String?                      // e.g. door address or terminal unlocode

  status          DeliveryOrderStatus           @default(PENDING)
  issuedAt        DateTime                      @default(now())

  documents       Document[]                    @relation("DO_Docs")

  @@map("delivery_order")
}
model DemurrageTerm {
  id           String    @id @default(uuid())
  portCode     String?   // null = global default
  freeDays     Int       // e.g. 5
  ratePerDay   Decimal   @db.Decimal(12,2)  // e.g. 100.00 USD/day
}

model EdiMessage {
  id            String    @id @default(uuid())
  direction     String
  messageType   String
  payload       Json
  ackStatus     String?
  sentAt        DateTime  @default(now())
  receivedAt    DateTime?
}

model Payment {
  id          String    @id @default(uuid())
  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  amount      Decimal   @db.Decimal(12,2)
  method      String
  reference   String?
  paidAt      DateTime  @default(now())
}


model AccountBalance {
  userId      String    @id
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditLimit Decimal   @db.Decimal(12,2)
  balance     Decimal   @db.Decimal(12,2)
}

model Notification {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         String
  payload      Json?
  sentAt       DateTime  @default(now())
  readAt       DateTime?
}

model WorkflowTask {
  id           String    @id @default(uuid())
  type         String
  payload      Json?
  triggerAt    DateTime
  completedAt  DateTime?
  bookingId    String?

}


model Declaration {
  id                     String               @id @default(uuid())
  
  // Always filed against exactly one SI:
  shippingInstructionId  String               @unique
  shippingInstruction    ShippingInstruction  @relation("SIToDeclaration", fields: [shippingInstructionId], references: [id], onDelete: Cascade)

  declarationType        DeclarationType
  status                 DeclarationStatus    @default(PENDING)
  filingDate             DateTime             @default(now())

  // for CUSTOMS
  value                  Decimal?             @db.Decimal(12,2)
  currency               String?              @db.Char(3)
  dutiesAmount           Decimal?             @db.Decimal(12,2)

  // optional DG sign-off
  emergencyContact       String?

  createdById            String?
  createdBy              User?                @relation("UserDeclarations", fields: [createdById], references: [id])

  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  lines                  DeclarationLine[]
  documents              Document[]           @relation("DeclarationDocuments")
}

model DeclarationLine {
  id                     String        @id @default(uuid())
  declarationId          String
  declaration            Declaration   @relation(fields: [declarationId], references: [id], onDelete: Cascade)

  // optional trace back to one of your SI cargo lines:
  cargoId                String?        
  cargo                  SiCargo?        @relation("CargoToDeclarationLine", fields: [cargoId], references: [id])

  // DG fields (always required for DG lines)
  unNumber               String
  properShippingName     String
  imoClass               String
  packingGroup           String
  flashPointC            Decimal?      @db.Decimal(6,2)
  flashPointF            Decimal?      @db.Decimal(6,2)

  // packaging & weights
  packageType            String
  numberOfPackages       Int
  netWeight              Decimal       @db.Decimal(12,2)
  netWeightUnit          WeightUnit
  grossWeight            Decimal?      @db.Decimal(12,2)
  grossWeightUnit        WeightUnit?

  createdAt              DateTime      @default(now())
}

/// ─────────────────────────────────────────────────────────────────────────────
/// BL DRAFT APPROVAL MODELS
/// ─────────────────────────────────────────────────────────────────────────────

model BLDraft {
  id                    String       @id @default(uuid())
  documentNo   String       
  UserId   String
  User     User             @relation("BLDraftCreatedBy", fields: [UserId], references: [id])
  bookingId       String
  booking        Booking  @relation("BookingToBLDraft", fields: [bookingId], references: [id], onDelete: Cascade)


  type         DraftType    @default(BL)
  status       DraftStatus  @default(OPEN)
  updatedAt    DateTime     @updatedAt

  documentId   String       @unique
  document     Document?    @relation(fields: [documentId], references: [id])

  versions     BLDraftVersion[]
  comments     BLDraftComment[]



  // --- Routing & Schedule ---
  originDepot         String?   // Operational pickup (depot/terminal/ICD/CFS)
  destinationDepot    String?   // Operational delivery (depot/terminal/ICD/CFS)
  portOfLoading       String?   // Seaport where vessel is loaded (POL)
  portOfDischarge     String?   // Seaport where vessel is discharged (POD)
  pickupType          DeliveryType?
  deliveryType        DeliveryType?
  scheduleDate        DateTime?
  scheduleWeeks       Int?
  via1                String?
  via2                String?

  // --- Containers ---
  containers          BLDraftContainer[]  // Relation for containers

  // --- Customs & Remarks ---
  remarks             String?

  // --- Other mapped fields ---
  bolCount            Int?

  // --- B/L-specific or legal fields ---
  shipper                 String?
  shippersReference       String?
  carriersReference       String?
  uniqueConsignmentRef    String?
  consignee               String?
  carrierName             String?
  notifyParty             String?
  additionalNotifyParty   String?
  preCarriageBy           String?
  vesselOrAircraft        String?
  voyageNo                String?
  placeOfReceipt          String?   // For multimodal: where carrier took charge
  finalDestination        String?   // For multimodal: ultimate delivery point
  shippedOnBoardDate      DateTime?
  marksAndNumbers         String?
  kindAndNoOfPackages     String?
  descriptionOfGoods      String?
  netWeightKg             Float?
  grossWeightKg           Float?
  measurementsM3          Float?
  totalThisPage           String?
  consignmentTotal        String?
  incoterms2020           String?
  payableAt               String?
  freightCharges          String?
  termsAndConditions      String?
  placeAndDateOfIssue     String?
  signatoryCompany        String?
  authorizedSignatory     String?
  signature               String?
  documentType            String?
  numberOfFreightedOriginalBLs   Int?
  numberOfFreightedCopies        Int?
  numberOfUnfreightedOriginalBLs Int?
  numberOfUnfreightedCopies      Int?
  placeOfIssue            String?
  dateOfIssue             DateTime?
  freightPayableAtDetails String?
  freightTerms            String?
  currency                String?
  exchangeRate            Float?
  forwardingAgent         String?
  exportReference         String?
  notifyAddress           String?
  grossVolumeM3           Float?
  netVolumeM3             Float?
  outerPackingType        String?
  numberOfOuterPacking    Int?
  imoClass                String?
  unNumber                String?
  customsReference        String?
  sealNumbers             String?
  instructions            String?
  deliveryInstructions    String?
  remarksToCarrier        String?
  serviceContractNumber   String?
  bookingReference        String?
}


model BLDraftContainer {
  id                 String     @id @default(uuid())
  bLDraftId            String
  bLDraft              BLDraft       @relation(fields: [bLDraftId], references: [id], onDelete: Cascade)

  cargoes            BLDraftCargo[]
  containerNumber    String
  sealNumber         String?
  sizeType           String?
  kindOfPackages     String?    // e.g., "pallets", "cartons"
  noOfPackages       Int?       // e.g., 10, 25, etc.
  descriptionOfGoods String?
  grossWeight        Float?
  grossWeightUnit    WeightUnit?
  netWeight          Float?
  netWeightUnit      WeightUnit?
  grossVolume        Float?
  grossVolumeUnit    VolumeUnit?
  netVolume          Float?
  netVolumeUnit      VolumeUnit?
  measurementsM3     Float?
  // ...add more if needed
}

model BLDraftCargo {
  id                  String           @id @default(cuid())
  containerId         String
  container           BLDraftContainer @relation(fields: [containerId], references: [id])
  description         String
  hsCode              String
  grossWeight         Float?
  grossVolume         Float?
  noOfPackages        Int?
  netWeight           Float?
  netVolume           Float?
  marksAndNumbers     String?          // <-- Add
  outerPacking        String?          // <-- Add
  sealNo              String?          // <-- Add
  sealNoOptional      String?          // <-- Add
  customerLoadReference String?        // <-- Add
  isDangerous         Boolean?         // Optional, for DG cargo
  unNumber            String?          // For DG cargo
  imoClass            String?          // For DG cargo
  packingGroup        String?          // For DG cargo
  // ...add other fields as required
}

model BLDraftVersion {
  id           String     @id @default(uuid())
  draftNo              String
  draft                BLDraft      @relation(fields: [draftNo], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  createdById  String?
  snapshot     Json 
  
   egm          EGM?     
}

model BLDraftComment {
  id           String     @id @default(uuid())
  draftNo              String
  draft                BLDraft      @relation(fields: [draftNo], references: [id], onDelete: Cascade)


  commenterId  String
  commenter    User       @relation("DraftCommenter", fields: [commenterId], references: [id], onDelete: Cascade)

  text         String
  createdAt    DateTime   @default(now())
}

/// ─────────────────────────────────────────────────────────────────────────────
/// ANALYTICS STAR-SCHEMA
/// ─────────────────────────────────────────────────────────────────────────────

model DimDate {
  id            Int       @id @default(autoincrement())
  date          DateTime  @unique
  year          Int
  quarter       Int
  month         Int
  day           Int
  weekday       Int
  monthName     String
  createdAt     DateTime  @default(now())

  factContainerStatuses    FactContainerStatus[]
  factTradeLaneRevenues    FactTradeLaneRevenue[]
  factOnTimePerformances   FactOnTimePerformance[]
}

model DimPort {
  id            String    @id @default(uuid())
  unlocode      String    @unique
  name          String
  country       String
  createdAt     DateTime  @default(now())

  factTradeLaneRevenues  FactTradeLaneRevenue[] @relation("OriginLane")
  factDestLaneRevenues   FactTradeLaneRevenue[] @relation("DestLane")
}

model DimContainerType {
  type           String   @id
  createdAt      DateTime @default(now())

  factContainerStatuses   FactContainerStatus[]
  factTradeLaneRevenues   FactTradeLaneRevenue[]
}

model DimCarrier {
  id             String    @id @default(uuid())
  name           String
  scacCode       String    @unique
  createdAt      DateTime  @default(now())

  factTradeLaneRevenues   FactTradeLaneRevenue[]
  factOnTimePerformances  FactOnTimePerformance[]
}

model FactContainerStatus {
  id             String             @id @default(uuid())
  dateId         Int
  date           DimDate            @relation(fields: [dateId], references: [id])
  containerType  String
  type           DimContainerType   @relation(fields: [containerType], references: [type])
  status         ContainerStatus
  count          Int
}

model FactTradeLaneRevenue {
  id              String             @id @default(uuid())
  dateId          Int
  date            DimDate            @relation(fields: [dateId], references: [id])
  originPortId    String
  originPort      DimPort            @relation("OriginLane", fields: [originPortId], references: [id])
  destPortId      String
  destPort        DimPort            @relation("DestLane", fields: [destPortId], references: [id])
  containerType   String
  containerTypeRel DimContainerType  @relation(fields: [containerType], references: [type])
  carrierId       String
  carrier         DimCarrier         @relation(fields: [carrierId], references: [id])
  revenue         Decimal            @db.Decimal(14,2)
}

model FactOnTimePerformance {
  id             String            @id @default(uuid())
  dateId         Int
  date           DimDate           @relation(fields: [dateId], references: [id])
  carrierId      String
  carrier        DimCarrier        @relation(fields: [carrierId], references: [id])
  onTimePct      Decimal           @db.Decimal(5,2)
}
