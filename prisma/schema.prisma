generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ─────────────────────────────────────────────────────────────────────────────
/// ENUMS
/// ─────────────────────────────────────────────────────────────────────────────

enum Role {
  ADMIN
  CLIENT
}

enum DeliveryType {
  door
  terminal
}

enum QuotationStatus {
  draft
  submitted
  pending_response
  responded
  accepted
  rejected
  booked
  expired
  cancelled
}

enum WeightUnit {
  kg
  lb
}

enum ContainerStatus {
  AVAILABLE
  ALLOCATED
  IN_TRANSIT
  MAINTENANCE
  LOST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum SnapshotType {
  CONTAINER
  VESSEL
}

/// ─────────────────────────────────────────────────────────────────────────────
/// MODELS
/// ─────────────────────────────────────────────────────────────────────────────

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  hashedPassword String
  role           Role          @default(CLIENT)
  firstName      String
  lastName       String
  countryCode    String        @db.Char(2)
  phoneNumber    String
  companyName    String?
  vatNumber      String?
  streetAddress  String
  city           String
  postalCode     String
  country        String
  createdAt      DateTime      @default(now())
  quotations     Quotation[]
  bookings       Booking[]
  invoices       Invoice[]
  activityLogs   ActivityLog[]
  notifications  Notification[]
  accountBalance AccountBalance?
  @@map("user")
}


model Quotation {
  id                  String           @id @default(uuid())
  userId              String
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  startLocation       String
  endLocation         String
  pickupType          DeliveryType
  deliveryType        DeliveryType
  validFrom           DateTime
  containerType       String
  containerQuantity   Int
  weightPerContainer  Decimal          @db.Decimal(10,2)
  weightUnit          WeightUnit
  commodity           String
  dangerousGoods      Boolean
  imoClass            String?
  unNumber            String?
  shipperOwned        Boolean
  multipleTypes       Boolean
  offer               Json?
  services            Json?
  status              QuotationStatus @default(draft)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  /// link once converted
  booking             Booking?         
  documents           Document[]
  declarations        Declaration[]
}


model Booking {
  id                String          @id @default(uuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// link back to the original quotation
  quotationId       String          @unique
  quotation         Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  /// ─── 1. Contact & Reference ─────────────────────────────────────────────
  contactReference  String?
  contactName       String?
  contactPhone      String?
  contactEmail      String?

  /// ─── 2. Routing & Schedule ─────────────────────────────────────────────
  originDepot       String          // your “Start Location”
  pickupType        DeliveryType
  scheduleDate      DateTime?       // “Start Date”
  scheduleWeeks     Int?            // “Plus X week(s)”
  via1              String?
  via2              String?
  destinationDepot  String          // your “End Location”
  deliveryType      DeliveryType
  exportMoT         String?
  importMoT         String?
  optimizeReefer    Boolean         @default(false)

  /// ─── 3. Cargo & Equipment ─────────────────────────────────────────────
  containers        BookingContainer[]

  /// ─── 4. Customs & Remarks ─────────────────────────────────────────────
  customsReferences CustomsReference[]
  bolCount          Int?
  exportFiling      Boolean         @default(false)
  filingBy          String?
  remarks           String?

  status            BookingStatus   @default(PENDING)
  createdAt         DateTime        @default(now())

  allocations       Allocation[]
  invoice           Invoice?
  documents         Document[]
  declarations      Declaration[]
  workflowTasks     WorkflowTask[]
}


model BookingContainer {
  id                String       @id @default(uuid())
  bookingId         String
  booking           Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  qty               Int
  type              String       // e.g. "40HC"
  shipperOwned      Boolean
  cargoDescription  String
  hsCode            String
  weight            Decimal      @db.Decimal(10,2)
  weightUnit        WeightUnit
  dangerousGoods    Boolean
  imoClass          String?
  unNumber          String?

  releaseDate       DateTime?
  releaseTime       DateTime?
}


model CustomsReference {
  id                String    @id @default(uuid())
  bookingId         String
  booking           Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  type              String    // e.g. "EORI", "MRN", "VAT"
  reference         String
}

model Container {
  id               String            @id @default(uuid())
  containerNo      String            @unique
  type             String
  status           ContainerStatus   @default(AVAILABLE)
  currentDepot     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  allocations      Allocation[]
  events           ContainerEvent[]
  demurrageAlerts  DemurrageAlert[]
}

model Allocation {
  id               String     @id @default(uuid())
  bookingId        String
  booking          Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  containerId      String
  container        Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  allocatedAt      DateTime   @default(now())
  releasedAt       DateTime?
}

model ContainerEvent {
  id            String     @id @default(uuid())
  containerId   String
  container     Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  eventTime     DateTime
  eventType     String
  portUnlocode  String?
  port          Port?      @relation("portEvents", fields: [portUnlocode], references: [unlocode])
  portName      String?
  description   String?
  sourceSystem  String
  fetchedAt     DateTime   @default(now())
  @@map("container_event")
}


model Vessel {
  id         String            @id @default(uuid())
  imo        String?           @unique
  mmsi       String?           @unique
  name       String
  schedules  VesselSchedule[]
  carrierId  String?
  carrier    Carrier?          @relation(fields: [carrierId], references: [id])
}

model VesselSchedule {
  id            String   @id @default(uuid())
  vesselId      String
  vessel        Vessel   @relation(fields: [vesselId], references: [id], onDelete: Cascade)
  portOfCallId  String
  portOfCall    Port     @relation(fields: [portOfCallId], references: [id])
  voyageNumber  String
  etd           DateTime?
  eta           DateTime?
  status        String?
  fetchedAt     DateTime @default(now())
}

model Invoice {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId   String @unique  // <-- enforces one invoice per booking
  booking     Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount      Decimal       @db.Decimal(12, 2)
  issuedDate  DateTime      @default(now()) @map("issued_date")
  dueDate     DateTime      @map("due_date")
  status      InvoiceStatus @default(PENDING)
  documents   Document[]
  payments    Payment[]
}

model DemurrageAlert {
  id           String     @id @default(uuid())
  containerId  String
  container    Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  alertTime    DateTime   @default(now()) @map("alert_time")
  message      String
  resolved     Boolean    @default(false)
}

model ActivityLog {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     String
  metadata   Json?
  createdAt  DateTime  @default(now()) @map("created_at")
}

model APISnapshot {
  id         String       @id @default(uuid())
  type       SnapshotType
  reference  String
  data       Json
  fetchedAt  DateTime     @default(now()) @map("fetched_at")
}

model Port {
  id         String   @id @default(uuid())
  unlocode   String   @unique
  name       String
  city       String
  country    String
  latitude   Float?
  longitude  Float?
  createdAt  DateTime @default(now())

  // back-relations
  rateSheetsOrigin      RateSheet[]       @relation("originRates")
  rateSheetsDestination RateSheet[]       @relation("destRates")
  vesselSchedules       VesselSchedule[]
  containerEvents       ContainerEvent[]  @relation("portEvents")
}

model ContainerTypeSpec {
  type             String   @id                          // e.g. "40HC", "20GP"
  lengthMm         Int
  widthMm          Int
  heightMm         Int
  maxStackWeightKg Int
  tareWeightKg     Int
}

model Carrier {
  id            String    @id @default(uuid())
  name          String
  scacCode      String    @unique
  apiCredentials Json?
  createdAt     DateTime  @default(now())

  // back-relations
  services      Service[]
  vessels       Vessel[]
}

model Service {
  id          String   @id @default(uuid())
  carrierId   String
  carrier     Carrier  @relation(fields:[carrierId], references:[id], onDelete: Cascade)
  name        String
  description String?
  createdAt   DateTime @default(now())
}

model RateSheet {
  id                 String    @id @default(uuid())
  originPortId       String
  destinationPortId  String
  containerType      String
  validFrom          DateTime
  validTo            DateTime
  baseRate           Decimal   @db.Decimal(12,2)
  surchargePct       Decimal   @db.Decimal(5,2)
  createdAt          DateTime  @default(now())

  // back-relations
  originPort         Port      @relation("originRates",      fields:[originPortId],      references:[id])
  destinationPort    Port      @relation("destRates",        fields:[destinationPortId], references:[id])
}

model Surcharge {
  id             String    @id @default(uuid())
  containerType  String
  date           DateTime
  surchargeType  String    // e.g. "MFR", "THC", "DETENTION"
  amount         Decimal   @db.Decimal(12,2)
}

model Document {
  id             String    @id @default(uuid())
  type           String    // "BOL", "SOC_DECLARATION", "CUSTOMS_CLEARANCE", etc.
  url            String
  uploadedAt     DateTime  @default(now())
  bookingId      String?
  quotationId    String?
  invoiceId      String?

  // back-relations
  booking        Booking?     @relation(fields:[bookingId],   references:[id])
  quotation      Quotation?   @relation(fields:[quotationId], references:[id])
  invoice        Invoice?     @relation(fields:[invoiceId],   references:[id])
}

model EdiMessage {
  id            String    @id @default(uuid())
  direction     String    // "INBOUND" | "OUTBOUND"
  messageType   String    // e.g. "BOOKING", "DO", "CODECO"
  payload       Json      // raw EDI or converted JSON
  ackStatus     String?   // e.g. "ACK", "NACK"
  sentAt        DateTime  @default(now())
  receivedAt    DateTime?
}

model Payment {
  id          String    @id @default(uuid())
  invoiceId   String
  invoice     Invoice   @relation(fields:[invoiceId], references:[id], onDelete: Cascade)
  amount      Decimal   @db.Decimal(12,2)
  method      String    // "WIRE", "CARD", "CREDIT_NOTE", etc.
  reference   String?
  paidAt      DateTime  @default(now())
}

model AccountBalance {
  userId      String    @id
  user        User      @relation(fields:[userId], references:[id], onDelete: Cascade)
  creditLimit Decimal   @db.Decimal(12,2)
  balance     Decimal   @db.Decimal(12,2)
}

model Notification {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields:[userId], references:[id], onDelete: Cascade)
  type         String    // "DEMURRAGE_ALERT", "BOOKING_CONFIRMED", etc.
  payload      Json?
  sentAt       DateTime  @default(now())
  readAt       DateTime?
}

model WorkflowTask {
  id           String    @id @default(uuid())
  type         String    // "FOLLOW_UP", "RELEASE_REMINDER", etc.
  payload      Json?
  triggerAt    DateTime
  completedAt  DateTime?
  bookingId    String?
  booking      Booking?  @relation(fields:[bookingId], references:[id])
}

model Declaration {
  id            String    @id @default(uuid())
  bookingId     String?
  quotationId   String?
  hsCode        String
  dutiesAmount  Decimal   @db.Decimal(12,2)
  filingDate    DateTime  @default(now())

  // back-relations
  booking       Booking?   @relation(fields:[bookingId],   references:[id])
  quotation     Quotation? @relation(fields:[quotationId], references:[id])
}

/// ─────────────────────────────────────────────────────────────────────────────
/// ANALYTICS STAR-SCHEMA
/// ─────────────────────────────────────────────────────────────────────────────

model DimDate {
  id            Int       @id @default(autoincrement())
  date          DateTime  @unique
  year          Int
  quarter       Int
  month         Int
  day           Int
  weekday       Int
  monthName     String
  createdAt     DateTime  @default(now())

  factContainerStatuses    FactContainerStatus[]
  factTradeLaneRevenues    FactTradeLaneRevenue[]
  factOnTimePerformances   FactOnTimePerformance[]
}

model DimPort {
  id            String    @id @default(uuid())
  unlocode      String    @unique
  name          String
  country       String
  createdAt     DateTime  @default(now())

  factTradeLaneRevenues  FactTradeLaneRevenue[] @relation("OriginLane")
  factDestLaneRevenues  FactTradeLaneRevenue[] @relation("DestLane")
}

model DimContainerType {
  type           String   @id      // e.g. "40HC"
  createdAt      DateTime @default(now())

  factContainerStatuses   FactContainerStatus[]
  factTradeLaneRevenues   FactTradeLaneRevenue[]
}

model DimCarrier {
  id             String    @id @default(uuid())
  name           String
  scacCode       String    @unique
  createdAt      DateTime  @default(now())

  factTradeLaneRevenues   FactTradeLaneRevenue[]
  factOnTimePerformances  FactOnTimePerformance[]
}

/// ### Fact: Container Status Distribution (for pie charts)
model FactContainerStatus {
  id             String             @id @default(uuid())
  dateId         Int
  date           DimDate            @relation(fields:[dateId], references:[id])
  containerType  String
  type           DimContainerType   @relation(fields:[containerType], references:[type])
  status         ContainerStatus
  count          Int
}

/// ### Fact: Revenue by Trade Lane (for bar charts)
model FactTradeLaneRevenue {
  id              String             @id @default(uuid())
  dateId          Int
  date            DimDate            @relation(fields:[dateId], references:[id])
  originPortId    String
  originPort      DimPort            @relation("OriginLane", fields:[originPortId],   references:[id])
  destPortId      String
  destPort        DimPort            @relation("DestLane",   fields:[destPortId],     references:[id])
  containerType   String
  containerTypeRel DimContainerType  @relation(fields:[containerType], references:[type])
  carrierId       String
  carrier         DimCarrier         @relation(fields:[carrierId],   references:[id])
  revenue         Decimal            @db.Decimal(14,2)
}

/// ### Fact: On-Time Performance (for line charts)
model FactOnTimePerformance {
  id             String            @id @default(uuid())
  dateId         Int
  date           DimDate           @relation(fields:[dateId], references:[id])
  carrierId      String
  carrier        DimCarrier        @relation(fields:[carrierId], references:[id])
  onTimePct      Decimal           @db.Decimal(5,2)   // e.g. 97.5
}
