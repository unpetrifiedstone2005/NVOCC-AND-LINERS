generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ─────────────────────────────────────────────────────────────────────────────
/// ENUMS
/// ─────────────────────────────────────────────────────────────────────────────

enum Role {
  ADMIN
  CLIENT
}


enum DeliveryType {
  door
  terminal
}

enum QuotationStatus {
  draft
  submitted
  pending_response
  responded
  accepted
  rejected
  booked
  expired
  cancelled
}

enum WeightUnit {
  kg
  lb
}

enum ContainerStatus {
  AVAILABLE
  ALLOCATED
  IN_TRANSIT
  MAINTENANCE
  LOST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}


enum SurchargeType {
  BASE_FREIGHT                    // Flat per-container rate covering voyage, fuel, crew, etc.
  BUNKER_ADJUSTMENT_FACTOR        // Compensates carriers for fuel cost fluctuations (BAF)
  CURRENCY_ADJUSTMENT_FACTOR      // Adjustment for currency swings (CAF)
  TERMINAL_HANDLING_CHARGE        // Gate-in/gate-out, crane work, stacking at terminals (THC)
  PEAK_SEASON_SURCHARGE           // Applied during high-demand periods (PSS)
  SECURITY_ISPS_SURCHARGE         // Covers ISPS code compliance/security fees
  PORT_CONGESTION_SURCHARGE       // Extra when port delays drive up costs
  OVERWEIGHT_OUT_OF_GAUGE_CHARGE  // Fees for overweight or non-standard dimensions
  DOCUMENTATION_ADMIN_FEE         // Bill of lading, customs paperwork, admin fees
  EMERGENCY_RISK_SURCHARGE        // Carriers’ exceptional risk or contingency surcharge
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum SnapshotType {
  CONTAINER
  VESSEL
}

enum DraftType {
  BL    // Bill of Lading
  SWB   // Sea Waybill
}

enum DraftStatus {
  OPEN              // Open for review
  CORRECTION_SENT   // Corrections requested by user
  APPROVED          // Approved by user
  RELEASED          // Released to carrier
}

/// ─────────────────────────────────────────────────────────────────────────────
/// MODELS
/// ─────────────────────────────────────────────────────────────────────────────

model User {
  id             String               @id @default(uuid())
  email          String               @unique
  hashedPassword String
  role           Role                 @default(CLIENT)
  firstName      String
  lastName       String
  countryCode    String               @db.Char(2)
  phoneNumber    String
  companyName    String?
  vatNumber      String?
  streetAddress  String
  city           String
  postalCode     String
  country        String
  createdAt      DateTime             @default(now())

  quotations     Quotation[]
  bookings       Booking[]
  invoices       Invoice[]
  activityLogs   ActivityLog[]
  notifications  Notification[]
  accountBalance AccountBalance?

  // back-relations for BL drafts
  createdBLDraftVersions BLDraftVersion[] @relation("DraftCreatedBy")
  commentsMade           BLDraftComment[] @relation("DraftCommenter")

  @@map("user")
}

model QuotationContainer {
  id                 String     @id @default(uuid())
  quotationId        String
  quotation          Quotation  @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  type               String
  qty                Int
  weightPerContainer Decimal    @db.Decimal(10,2)
  weightUnit         WeightUnit
  hsCode             String
  dangerousGoods     Boolean
  imoClass           String?
  unNumber           String?
}

model Quotation {
  id           String                @id @default(uuid())
  userId       String
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  startLocation String
  endLocation   String
  pickupType    DeliveryType
  deliveryType  DeliveryType
  validFrom     DateTime
  commodity     String
  dangerousGoods Boolean
  imoClass      String?
  unNumber      String?
  shipperOwned  Boolean
  multipleTypes Boolean
  offer         Json?
  services      Json?
  status        QuotationStatus      @default(accepted)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  documents     Document[]
  containers    QuotationContainer[]   // <-- for multi-container
  declarations  Declaration[]
  booking Booking?
}

model Booking {
  id                String             @id @default(uuid())
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotationId       String             @unique
  quotation         Quotation          @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  // 1. Contact & Reference
  contactReference  String?
  contactName       String?
  contactPhone      String?
  contactEmail      String?

  // 2. Routing & Schedule
  originDepot       String
  pickupType        DeliveryType
  scheduleDate      DateTime?
  scheduleWeeks     Int?
  via1              String?
  via2              String?
  destinationDepot  String
  deliveryType      DeliveryType
  exportMoT         String?
  importMoT         String?
  optimizeReefer    Boolean            @default(false)

  // 3. Cargo & Equipment
  containers        BookingContainer[]  // <-- One-to-many, from Booking to BookingContainer

  // 4. Customs & Remarks
  customsReferences CustomsReference[]
  bolCount          Int?
  exportFiling      Boolean            @default(false)
  filingBy          String?
  remarks           String?

  status            BookingStatus      @default(PENDING)
  createdAt         DateTime           @default(now())

  allocations       Allocation[]
  invoice           Invoice?
  documents         Document[]
  declarations      Declaration[]
  workflowTasks     WorkflowTask[]

  // back-relation for BL drafts
  bldrafts          BLDraft[]
}


model BookingContainer {
  id                String      @id @default(uuid())
  bookingId         String
  booking           Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  qty               Int
  type              String
  shipperOwned      Boolean
  cargoDescription  String
  hsCode            String
  weight            Decimal     @db.Decimal(10,2)
  weightUnit        WeightUnit
  dangerousGoods    Boolean
  imoClass          String?
  unNumber          String?

  releaseDate       DateTime?
  releaseTime       DateTime?
}

model CustomsReference {
  id                String      @id @default(uuid())
  bookingId         String
  booking           Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  type              String
  reference         String
}

model Container {
  id               String            @id @default(uuid())
  containerNo      String            @unique
  type             String
  description      String?
  bicCode          String?
  ownership        String?
  companyOrigin    String?
  manufacturer     String?
  customsApproval  String?
  status           ContainerStatus   @default(AVAILABLE)
  currentDepot     String?
  lastUsedAt       DateTime?         // ← NEW: track when it was last allocated
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  allocations      Allocation[]
  events           ContainerEvent[]
  demurrageAlerts  DemurrageAlert[]
}

model Allocation {
  id               String     @id @default(uuid())
  bookingId        String
  booking          Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  containerId      String
  container        Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  allocatedAt      DateTime   @default(now())
  releasedAt       DateTime?
}

model ContainerEvent {
  id            String     @id @default(uuid())
  containerId   String
  container     Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  eventTime     DateTime
  eventType     String
  portUnlocode  String?
  port          Port?      @relation("portEvents", fields: [portUnlocode], references: [unlocode])
  portName      String?
  description   String?
  sourceSystem  String
  fetchedAt     DateTime   @default(now())

  @@map("container_event")
}

model Vessel {
  id         String            @id @default(uuid())
  imo        String?           @unique
  mmsi       String?           @unique
  name       String
  schedules  VesselSchedule[]
  carrierId  String?
  carrier    Carrier?          @relation(fields: [carrierId], references: [id])
}

model VesselSchedule {
  id            String   @id @default(uuid())
  vesselId      String
  vessel        Vessel   @relation(fields: [vesselId], references: [id], onDelete: Cascade)
  portOfCallId  String
  portOfCall    Port     @relation(fields: [portOfCallId], references: [id])
  voyageNumber  String
  etd           DateTime?
  eta           DateTime?
  status        String?
  fetchedAt     DateTime @default(now())
}

model Invoice {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId   String        @unique
  booking     Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount      Decimal       @db.Decimal(12, 2)
  issuedDate  DateTime      @default(now()) @map("issued_date")
  dueDate     DateTime      @map("due_date")
  status      InvoiceStatus @default(PENDING)

  documents   Document[]
  payments    Payment[]
}

model DemurrageAlert {
  id           String     @id @default(uuid())
  containerId  String
  container    Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  alertTime    DateTime   @default(now()) @map("alert_time")
  message      String
  resolved     Boolean    @default(false)
}

model ActivityLog {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     String
  metadata   Json?
  createdAt  DateTime  @default(now()) @map("created_at")
}

model APISnapshot {
  id         String       @id @default(uuid())
  type       SnapshotType
  reference  String
  data       Json
  fetchedAt  DateTime     @default(now()) @map("fetched_at")
}

model Port {
  id         String         @id @default(uuid())
  unlocode   String         @unique
  name       String
  city       String
  country    String
  latitude   Float?
  longitude  Float?
  createdAt  DateTime       @default(now())

  rateSheetsOrigin      RateSheet[]       @relation("originRates")
  rateSheetsDestination RateSheet[]       @relation("destRates")
  vesselSchedules       VesselSchedule[]
  containerEvents       ContainerEvent[]  @relation("portEvents")
}

model ContainerTypeSpec {
  type             String   @id
  lengthMm         Int
  widthMm          Int
  heightMm         Int
  maxStackWeightKg Int
  tareWeightKg     Int
}

model Carrier {
  id            String    @id @default(uuid())
  name          String
  scacCode      String    @unique
  apiCredentials Json?
  createdAt     DateTime  @default(now())

  services      Service[]
  vessels       Vessel[]
}

model Service {
  id          String   @id @default(uuid())
  carrierId   String
  carrier     Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)
  name        String
  description String?
  createdAt   DateTime @default(now())
}

model WeightBracket {
  id           String      @id @default(uuid())
  rateSheetId  String
  rateSheet    RateSheet   @relation(fields:[rateSheetId], references:[id], onDelete: Cascade)
  minWeightKg  Int
  maxWeightKg  Int
  ratePerKg    Decimal     @db.Decimal(12,2)
}

model RateSheet {
  id                 String       @id @default(uuid())
  originPortId       String
  destinationPortId  String
  containerType      String
  validFrom          DateTime
  validTo            DateTime
  baseRate           Decimal      @db.Decimal(12,2)
  currency           String       @default("USD")
  includedWeightKg   Int?         // optional number of kgs included
  overweightRatePerKg Decimal?    @db.Decimal(12,2) // per‐kg rate beyond includedWeightKg

  carrierId          String?
  serviceId          String?

  createdAt          DateTime     @default(now())

  surcharges         Surcharge[]
  weightBrackets     WeightBracket[]

  originPort         Port         @relation("originRates", fields: [originPortId], references: [id])
  destinationPort    Port         @relation("destRates",   fields: [destinationPortId], references: [id])
}

model Surcharge {
  id             String         @id @default(uuid())
  rateSheetId    String
  rateSheet      RateSheet      @relation(fields: [rateSheetId], references: [id], onDelete: Cascade)
  surchargeType  SurchargeType
  amount         Decimal        @db.Decimal(12,2)  // fixed amount or % depending on type
  isPercentage   Boolean        @default(false)
  effectiveDate  DateTime       @default(now())
}

model Document {
  id             String      @id @default(uuid())
  type           String
  url            String
  uploadedAt     DateTime    @default(now())
  bookingId      String?
  quotationId    String?
  invoiceId      String?

  booking        Booking?     @relation(fields: [bookingId],   references: [id])
  quotation      Quotation?   @relation(fields: [quotationId], references: [id])
  invoice        Invoice?     @relation(fields: [invoiceId],   references: [id])

  // back-relations for BL drafts
  bldraft        BLDraft?           @relation("BLDraftToDocument")
  bldraftVersions BLDraftVersion[]  @relation("BLDraftVersionToDocument")
}

model EdiMessage {
  id            String    @id @default(uuid())
  direction     String
  messageType   String
  payload       Json
  ackStatus     String?
  sentAt        DateTime  @default(now())
  receivedAt    DateTime?
}

model Payment {
  id          String    @id @default(uuid())
  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  amount      Decimal   @db.Decimal(12,2)
  method      String
  reference   String?
  paidAt      DateTime  @default(now())
}

model AccountBalance {
  userId      String    @id
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditLimit Decimal   @db.Decimal(12,2)
  balance     Decimal   @db.Decimal(12,2)
}

model Notification {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         String
  payload      Json?
  sentAt       DateTime  @default(now())
  readAt       DateTime?
}

model WorkflowTask {
  id           String    @id @default(uuid())
  type         String
  payload      Json?
  triggerAt    DateTime
  completedAt  DateTime?
  bookingId    String?
  booking      Booking?  @relation(fields: [bookingId], references: [id])
}

model Declaration {
  id            String    @id @default(uuid())
  bookingId     String?
  quotationId   String?
  hsCode        String
  dutiesAmount  Decimal   @db.Decimal(12,2)
  filingDate    DateTime  @default(now())

  booking       Booking?   @relation(fields: [bookingId],   references: [id])
  quotation     Quotation? @relation(fields: [quotationId], references: [id])
}

/// ─────────────────────────────────────────────────────────────────────────────
/// BL DRAFT APPROVAL MODELS
/// ─────────────────────────────────────────────────────────────────────────────

model BLDraft {
  documentNo   String       @id
  bookingId    String
  booking      Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  type         DraftType    @default(BL)
  status       DraftStatus  @default(OPEN)
  updatedAt    DateTime     @updatedAt

  documentId   String       @unique
  document     Document     @relation("BLDraftToDocument", fields: [documentId], references: [id])

  versions     BLDraftVersion[]
  comments     BLDraftComment[]
}

model BLDraftVersion {
  id           String     @id @default(uuid())
  draftNo      String
  draft        BLDraft    @relation(fields: [draftNo], references: [documentNo], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  createdById  String?
  createdBy    User?      @relation("DraftCreatedBy", fields: [createdById], references: [id])

  documentId   String     @unique
  document     Document   @relation("BLDraftVersionToDocument", fields: [documentId], references: [id])
}

model BLDraftComment {
  id           String     @id @default(uuid())
  draftNo      String
  draft        BLDraft    @relation(fields: [draftNo], references: [documentNo], onDelete: Cascade)

  commenterId  String
  commenter    User       @relation("DraftCommenter", fields: [commenterId], references: [id], onDelete: Cascade)

  text         String
  createdAt    DateTime   @default(now())
}

/// ─────────────────────────────────────────────────────────────────────────────
/// ANALYTICS STAR-SCHEMA
/// ─────────────────────────────────────────────────────────────────────────────

model DimDate {
  id            Int       @id @default(autoincrement())
  date          DateTime  @unique
  year          Int
  quarter       Int
  month         Int
  day           Int
  weekday       Int
  monthName     String
  createdAt     DateTime  @default(now())

  factContainerStatuses    FactContainerStatus[]
  factTradeLaneRevenues    FactTradeLaneRevenue[]
  factOnTimePerformances   FactOnTimePerformance[]
}

model DimPort {
  id            String    @id @default(uuid())
  unlocode      String    @unique
  name          String
  country       String
  createdAt     DateTime  @default(now())

  factTradeLaneRevenues  FactTradeLaneRevenue[] @relation("OriginLane")
  factDestLaneRevenues   FactTradeLaneRevenue[] @relation("DestLane")
}

model DimContainerType {
  type           String   @id
  createdAt      DateTime @default(now())

  factContainerStatuses   FactContainerStatus[]
  factTradeLaneRevenues   FactTradeLaneRevenue[]
}

model DimCarrier {
  id             String    @id @default(uuid())
  name           String
  scacCode       String    @unique
  createdAt      DateTime  @default(now())

  factTradeLaneRevenues   FactTradeLaneRevenue[]
  factOnTimePerformances  FactOnTimePerformance[]
}

model FactContainerStatus {
  id             String             @id @default(uuid())
  dateId         Int
  date           DimDate            @relation(fields: [dateId], references: [id])
  containerType  String
  type           DimContainerType   @relation(fields: [containerType], references: [type])
  status         ContainerStatus
  count          Int
}

model FactTradeLaneRevenue {
  id              String             @id @default(uuid())
  dateId          Int
  date            DimDate            @relation(fields: [dateId], references: [id])
  originPortId    String
  originPort      DimPort            @relation("OriginLane", fields: [originPortId], references: [id])
  destPortId      String
  destPort        DimPort            @relation("DestLane", fields: [destPortId], references: [id])
  containerType   String
  containerTypeRel DimContainerType  @relation(fields: [containerType], references: [type])
  carrierId       String
  carrier         DimCarrier         @relation(fields: [carrierId], references: [id])
  revenue         Decimal            @db.Decimal(14,2)
}

model FactOnTimePerformance {
  id             String            @id @default(uuid())
  dateId         Int
  date           DimDate           @relation(fields: [dateId], references: [id])
  carrierId      String
  carrier        DimCarrier        @relation(fields: [carrierId], references: [id])
  onTimePct      Decimal           @db.Decimal(5,2)
}
