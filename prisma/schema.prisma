generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ─────────────────────────────────────────────────────────────────────────────
/// ENUMS
/// ─────────────────────────────────────────────────────────────────────────────

enum Role {
  ADMIN
  CLIENT
}


enum DeliveryType {
  door
  terminal
}

enum QuotationStatus {
  draft
  submitted
  pending_response
  responded
  accepted
  rejected
  booked
  expired
  cancelled
}

enum RefundStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum WeightUnit {
  kg
  lb
  t
}

enum VolumeUnit {
  m3
  ft3
  l
}

enum ContainerStatus {
  AVAILABLE
  ALLOCATED
  IN_TRANSIT
  MAINTENANCE
  LOST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}


enum SurchargeType {
  BASE_FREIGHT
  BUNKER_ADJUSTMENT_FACTOR
  CURRENCY_ADJUSTMENT_FACTOR
  TERMINAL_HANDLING_CHARGE
  PEAK_SEASON_SURCHARGE
  SECURITY_ISPS_SURCHARGE
  PORT_CONGESTION_SURCHARGE
  OVERWEIGHT_OUT_OF_GAUGE_CHARGE
  DOCUMENTATION_ADMIN_FEE
  EMERGENCY_RISK_SURCHARGE
  RESIDENTIAL_DELIVERY_SURCHARGE
  DELIVERY_AREA_SURCHARGE
  SATURDAY_DELIVERY_SURCHARGE
  DECLARED_VALUE_SURCHARGE
  SIGNATURE_SURCHARGE
  ADDRESS_CORRECTION_SURCHARGE
  ADDITIONAL_HANDLING_SURCHARGE
  DANGEROUS_GOODS_SURCHARGE
  REEFER_SURCHARGE
  WAR_RISK_SURCHARGE
}


enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum SnapshotType {
  CONTAINER
  VESSEL
}

enum DraftType {
  BL    // Bill of Lading
  SWB   // Sea Waybill
}

enum DraftStatus {
  OPEN                // Open for review
  CORRECTION_SENT     // Corrections requested by user
  APPROVED            // Approved by user
  RELEASED            // Released to carrier
  EXCEEDS_CAPACITY    // Cargo exceeds booking limits, price review needed
  PRICE_CHANGE_PENDING // Other price-affecting change (e.g. route/service)
}

enum CustomsReferenceType {
  INVOICE
  PACKING_LIST
  // ...other types as needed
}



/// ─────────────────────────────────────────────────────────────────────────────
/// MODELS
/// ─────────────────────────────────────────────────────────────────────────────

model User {
  id             String               @id @default(uuid())
  email          String               @unique
  hashedPassword String
  role           Role                 @default(CLIENT)
  firstName      String
  lastName       String
  countryCode    String               @db.Char(2)
  phoneNumber    String
  companyName    String?
  vatNumber      String?
  streetAddress  String
  city           String
  postalCode     String
  country        String
  createdAt      DateTime             @default(now())

  quotations     Quotation[]
  bookings       Booking[]
  invoices       Invoice[]
  activityLogs   ActivityLog[]
  notifications  Notification[]
  accountBalance AccountBalance?

  // back-relations for BL drafts
  createdBLDraftVersions BLDraftVersion[] @relation("DraftCreatedBy")
  commentsMade           BLDraftComment[] @relation("DraftCommenter")

  // Back-relation for Declaration
  declarations           Declaration[]    @relation("UserDeclarations")

  @@map("user")
}

model SOCContainer {
  id                    String   @id @default(uuid())
  quotationContainerId  String
  quotationContainer    QuotationContainer @relation(fields: [quotationContainerId], references: [id], onDelete: Cascade)

  containerNo           String   @unique
  type                  String
  tareWeight            Decimal  @db.Decimal(10,2)
  cscPlateUrl           String
  cscExpiry             DateTime
  manufactureDate       DateTime?
  acepApprovalNo        String?
  allowableStackWeight  Decimal? @db.Decimal(10,2)
  rackingTestLoadValue  Decimal? @db.Decimal(10,2)
  surveyReportUrl       String?
  ownershipProofUrl     String?
  declarationUrl        String
  photos                String[] // Array of URLs
  isReefer              Boolean  @default(false)
  maintenanceManualUrl  String?
  emergencyProceduresUrl String?
  sparePartsKit         Boolean? // For reefers
  createdAt             DateTime @default(now())
}

model QuotationContainer {
  id                String     @id @default(uuid())
  quotationId       String
  quotation         Quotation  @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  shipperOwned      Boolean    @default(false)
  socContainers     SOCContainer[]
  cargo             Cargo[]    // <-- Keep this if you want to link containers to cargo (recommended)
  type              String
  qty               Int
  weightPerContainer Decimal    @db.Decimal(10,2)
  weightUnit        WeightUnit
}


model Quotation {
  id           String                @id @default(uuid())
  userId       String
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  startLocation String
  endLocation   String
  pickupType    DeliveryType
  deliveryType  DeliveryType
  validFrom     DateTime
  commodity     String
  shipperOwned  Boolean
  multipleTypes Boolean
  offer         Json?
  services      Json?
  status        QuotationStatus      @default(accepted)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  documents     Document[]
  containers    QuotationContainer[]   // <-- for multi-container
  cargo         Cargo[]               // <-- Keep this to link cargo to quotation
  declarations  Declaration[]
  booking       Booking?
}

model Booking {
  id                String             @id @default(uuid())
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotationId       String             @unique
  quotation         Quotation          @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  // 1. Contact & Reference
  customerName        String?          // Pre-filled from user/org
  customerAddress     String?          // Pre-filled from user/org
  contactReference    String?
  contactName         String?
  contactPhone        String?
  contactEmail        String?

  // 2. Contract & Quotation
  contractNumber      String?          // Quotation / Contract No.
  contractValidTo     DateTime?        // Valid To (date)
  contractualParty    String?          // Contractual Party
  contractualPartyAddress String?      // Contractual Party Address

  // 3. Routing & Schedule
  routingSelected     String?          // Routing option chosen
  originDepot         String           // Start Location
  scheduleDate        DateTime?        // Start Date
  scheduleWeeks       Int?             // Plus ... weeks
  via1                String?
  via2                String?
  destinationDepot    String           // End Location
  pickupType          DeliveryType     // Received At (door/terminal)
  exportMoT           String?
  importMoT           String?
  optimizeReefer      Boolean          @default(false)
  scheduleOption      String?          // Specific sailing (POL, Date, Vessel, POD, Transit Time)

  // 4. Pickup & Delivery Detail
  pickupDate          DateTime?
  deliveryDate        DateTime?
  deliveryType        DeliveryType     // Delivered At (door/terminal)

  // 5. Cargo & Equipment
  containers          BookingContainer[] // Container rows (up to 4)
  commodity           String?           // Commodity (FAK, etc.)
  customsDetails      String?           // Customs Details (free-text)

  // 6. Customs & Remarks
  customsReferences   CustomsReference[]
  bolCount            Int?              // Bill of Lading Numbers Needed
  exportFiling        Boolean           @default(false)
  filingBy            String?
  remarks             String?


  status              BookingStatus     @default(PENDING)
  createdAt           DateTime          @default(now())

  allocations         Allocation[]
  invoice             Invoice?
  documents           Document[]
  declarations        Declaration[]
  workflowTasks       WorkflowTask[]
  bldrafts            BLDraft[]
  refunds             Refunded[]
}


model BookingContainer {
  id                String      @id @default(uuid())
  bookingId         String
  booking           Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  qty               Int
  type              String
  shipperOwned      Boolean
  cargoDescription  String
  weight            Decimal     @db.Decimal(10,2)
  weightUnit        WeightUnit
  dangerousGoods    Boolean
  imoClass          String?
  unNumber          String?

  releaseDate       DateTime?
  releaseTime       DateTime?
}

model CustomsReference {
  id        String                @id @default(uuid())
  bookingId String
  booking   Booking               @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  type      CustomsReferenceType  // Now enforced by enum!
  reference String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model Container {
  id                  String            @id @default(uuid())
  containerNo         String            @unique
  type                String
  description         String?
  bicCode             String?
  ownership           String?
  companyOrigin       String?
  manufacturer        String?
  customsApproval     String?
  status              ContainerStatus   @default(AVAILABLE)
  currentDepot        String?
  lastUsedAt          DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Certification fields
  cscPlateUrl         String?           // Proof of CSC compliance
  certificationExpiry DateTime?         // When does the cert expire?
  foodGrade           Boolean?          // If applicable
  reefer              Boolean?          // If applicable

  allocations         Allocation[]
  events              ContainerEvent[]
  demurrageAlerts     DemurrageAlert[]
}

model Cargo {
  id          String   @id @default(uuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  containerId String?
  container   QuotationContainer? @relation(fields: [containerId], references: [id])
  hsCode      String
  description String
  isDangerous Boolean  @default(false)
  unNumber    String?
  imoClass    String?
  packingGroup String?
  // ...other fields as needed
}

model Allocation {
  id               String     @id @default(uuid())
  bookingId        String
  booking          Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  containerId      String
  container        Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  allocatedAt      DateTime   @default(now())
  releasedAt       DateTime?
  sealNumber       String?
}

model ContainerEvent {
  id            String     @id @default(uuid())
  containerId   String
  container     Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  eventTime     DateTime
  eventType     String
  portUnlocode  String?
  port          Port?      @relation("portEvents", fields: [portUnlocode], references: [unlocode])
  portName      String?
  description   String?
  sourceSystem  String
  fetchedAt     DateTime   @default(now())

  @@map("container_event")
}

model Vessel {
  id         String            @id @default(uuid())
  imo        String?           @unique
  mmsi       String?           @unique
  name       String
  schedules  VesselSchedule[]
  carrierId  String?
}

model VesselSchedule {
  id            String   @id @default(uuid())
  vesselId      String
  vessel        Vessel   @relation(fields: [vesselId], references: [id], onDelete: Cascade)
  portOfCallId  String
  portOfCall    Port     @relation(fields: [portOfCallId], references: [id])
  voyageNumber  String
  etd           DateTime?
  eta           DateTime?
  status        String?
  operationType String
  fetchedAt     DateTime @default(now())
  @@unique([vesselId, portOfCallId, voyageNumber, operationType, etd])
}


model BankAccount {
  id             String    @id @default(uuid())
  accountName    String
  bankName       String
  accountNumber  String
  branchName     String
  ifsc           String?   // <-- Added IFSC code for Indian payments
  iban           String?
  swift          String?
  bankAddress    String?
  currency       String
  isActive       Boolean   @default(true)
  invoices       Invoice[] // Opposite relation
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Invoice {
  id                           String                          @id @default(uuid())
  userId                       String
  user                         User                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId                    String                          @unique
  booking                      Booking                         @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount                       Decimal                         @db.Decimal(12, 2)
  issuedDate                   DateTime                        @default(now()) @map("issued_date")
  dueDate                      DateTime                        @map("due_date")
  status                       InvoiceStatus                   @default(PENDING)
  description                  String?

  // New fields for bank reference
  bankAccountId               String
  bankAccount                 BankAccount                     @relation(fields: [bankAccountId], references: [id])
  documents                   Document[]
  payments                    Payment[]
}



model Refunded {
  id                String      @id @default(uuid())
  bookingId         String
  booking           Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  draftVersionId    String?     // Optionally link to the B/L draft version that triggered the refund
  draftVersion      BLDraftVersion? @relation(fields: [draftVersionId], references: [id])
  amount            Decimal     @db.Decimal(12,2)
  reason            String?
  status            RefundStatus @default(PENDING)
  createdAt         DateTime    @default(now())
  processedAt       DateTime?
  note              String?
}



model DemurrageAlert {
  id           String     @id @default(uuid())
  containerId  String
  container    Container  @relation(fields: [containerId], references: [id], onDelete: Cascade)
  alertTime    DateTime   @default(now()) @map("alert_time")
  message      String
  resolved     Boolean    @default(false)
}

model ActivityLog {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     String
  metadata   Json?
  createdAt  DateTime  @default(now()) @map("created_at")
}

model APISnapshot {
  id         String       @id @default(uuid())
  type       SnapshotType
  reference  String
  data       Json
  fetchedAt  DateTime     @default(now()) @map("fetched_at")
}

model Port {
  id         String         @id @default(uuid())
  unlocode   String         @unique
  name       String
  city       String
  country    String
  latitude   Float?
  longitude  Float?
  createdAt  DateTime       @default(now())

  rateSheetsOrigin      RateSheet[]       @relation("originRates")
  rateSheetsDestination RateSheet[]       @relation("destRates")
  vesselSchedules       VesselSchedule[]
  containerEvents       ContainerEvent[]  @relation("portEvents")
}

model ContainerTypeSpec {
  type             String   @id
  lengthMm         Int
  widthMm          Int
  heightMm         Int
  maxStackWeightKg Int
  tareWeightKg     Int
}



model WeightBracket {
  id           String      @id @default(uuid())
  rateSheetId  String
  rateSheet    RateSheet   @relation(fields:[rateSheetId], references:[id], onDelete: Cascade)
  minWeightKg  Int
  maxWeightKg  Int
  ratePerKg    Decimal     @db.Decimal(12,2)
}

model RateSheet {
  id                   String       @id @default(uuid())
  // — ocean‐leg fields (keep existing) —
  originPortId         String?      
  destinationPortId    String?
  // — inland‐leg fields (new) —
  originDepotId        String?
  destinationDepotId   String?

  containerType        String
  validFrom            DateTime
  validTo              DateTime
  baseRate             Decimal      @db.Decimal(12,2)
  currency             String       @default("USD")
  includedWeightKg     Int?
  overweightRatePerKg  Decimal?     @db.Decimal(12,2)

  carrierId            String?
  serviceId            String?

  isDangerousGoods     Boolean      @default(false)

  createdAt            DateTime     @default(now())

  surcharges           Surcharge[]
  weightBrackets       WeightBracket[]

  /// ocean‐leg relations (now optional)
  originPort           Port?        @relation("originRates",      fields: [originPortId],       references: [id])
  destinationPort      Port?        @relation("destRates",        fields: [destinationPortId],  references: [id])

  /// inland‐leg relations (new)
  originDepot          Depot?       @relation("originDepotRates",      fields: [originDepotId],       references: [id])
  destinationDepot     Depot?       @relation("destDepotRates",        fields: [destinationDepotId],  references: [id])
}

model Depot {
  id                 String       @id @default(uuid())
  name               String
  address            String

  originDepotRates   RateSheet[]  @relation("originDepotRates")
  destDepotRates     RateSheet[]  @relation("destDepotRates")
}


model Surcharge {
  id             String         @id @default(uuid())
  rateSheetId    String
  rateSheet      RateSheet      @relation(fields: [rateSheetId], references: [id], onDelete: Cascade)
  surchargeType  SurchargeType
  amount         Decimal        @db.Decimal(12,2)
  isPercentage   Boolean        @default(false)
  effectiveDate  DateTime       @default(now())

  appliesToDG    Boolean        @default(false) // <-- NEW FIELD
}


model Document {
  id             String      @id @default(uuid())
  type           String
  url            String
  uploadedAt     DateTime    @default(now())
  bookingId      String?
  quotationId    String?
  invoiceId      String?
  declarationId  String?

  booking        Booking?    @relation(fields: [bookingId], references: [id])
  quotation      Quotation?  @relation(fields: [quotationId], references: [id])
  invoice        Invoice?    @relation(fields: [invoiceId], references: [id])
  declaration    Declaration? @relation("DeclarationDocuments", fields: [declarationId], references: [id])
  bldraft        BLDraft?    // Back relation (optional)
}

model EdiMessage {
  id            String    @id @default(uuid())
  direction     String
  messageType   String
  payload       Json
  ackStatus     String?
  sentAt        DateTime  @default(now())
  receivedAt    DateTime?
}

model Payment {
  id          String    @id @default(uuid())
  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  amount      Decimal   @db.Decimal(12,2)
  method      String
  reference   String?
  paidAt      DateTime  @default(now())
}


model AccountBalance {
  userId      String    @id
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditLimit Decimal   @db.Decimal(12,2)
  balance     Decimal   @db.Decimal(12,2)
}

model Notification {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         String
  payload      Json?
  sentAt       DateTime  @default(now())
  readAt       DateTime?
}

model WorkflowTask {
  id           String    @id @default(uuid())
  type         String
  payload      Json?
  triggerAt    DateTime
  completedAt  DateTime?
  bookingId    String?
  booking      Booking?  @relation(fields: [bookingId], references: [id])
}

model Declaration {
  id                   String    @id @default(uuid())
  bookingId            String?
  quotationId          String?
  hsCode               String
  goodsDescription     String
  countryOfOrigin      String
  countryOfDestination String
  value                Decimal   @db.Decimal(12,2)
  currency             String
  dutiesAmount         Decimal   @db.Decimal(12,2)
  declarationType      String    // e.g. "CUSTOMS", "DG"
  status               String    @default("PENDING")
  filingDate           DateTime  @default(now())
  isDangerous          Boolean   @default(false)
  unNumber             String?
  imoClass             String?
  packingGroup         String?
  emergencyContact     String?
  createdById          String?
  createdBy            User?     @relation("UserDeclarations", fields: [createdById], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  booking              Booking?   @relation(fields: [bookingId],   references: [id])
  quotation            Quotation? @relation(fields: [quotationId], references: [id])
  documents            Document[] @relation("DeclarationDocuments")
  
}


/// ─────────────────────────────────────────────────────────────────────────────
/// BL DRAFT APPROVAL MODELS
/// ─────────────────────────────────────────────────────────────────────────────

model BLDraft {
  documentNo   String       @id
  bookingId    String
  booking      Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  type         DraftType    @default(BL)
  status       DraftStatus  @default(OPEN)
  updatedAt    DateTime     @updatedAt

  documentId   String       @unique
  document     Document?    @relation(fields: [documentId], references: [id])

  versions     BLDraftVersion[]
  comments     BLDraftComment[]

  // --- Routing & Schedule ---
  originDepot         String?   // Operational pickup (depot/terminal/ICD/CFS)
  destinationDepot    String?   // Operational delivery (depot/terminal/ICD/CFS)
  portOfLoading       String?   // Seaport where vessel is loaded (POL)
  portOfDischarge     String?   // Seaport where vessel is discharged (POD)
  pickupType          DeliveryType?
  deliveryType        DeliveryType?
  scheduleDate        DateTime?
  scheduleWeeks       Int?
  via1                String?
  via2                String?

  // --- Containers ---
  containers          BLDraftContainer[]  // Relation for containers

  // --- Customs & Remarks ---
  remarks             String?

  // --- Other mapped fields ---
  bolCount            Int?

  // --- B/L-specific or legal fields ---
  shipper                 String?
  shippersReference       String?
  carriersReference       String?
  uniqueConsignmentRef    String?
  consignee               String?
  carrierName             String?
  notifyParty             String?
  additionalNotifyParty   String?
  preCarriageBy           String?
  vesselOrAircraft        String?
  voyageNo                String?
  placeOfReceipt          String?   // For multimodal: where carrier took charge
  finalDestination        String?   // For multimodal: ultimate delivery point
  shippedOnBoardDate      DateTime?
  marksAndNumbers         String?
  kindAndNoOfPackages     String?
  descriptionOfGoods      String?
  netWeightKg             Float?
  grossWeightKg           Float?
  measurementsM3          Float?
  totalThisPage           String?
  consignmentTotal        String?
  incoterms2020           String?
  payableAt               String?
  freightCharges          String?
  termsAndConditions      String?
  placeAndDateOfIssue     String?
  signatoryCompany        String?
  authorizedSignatory     String?
  signature               String?
  documentType            String?
  numberOfFreightedOriginalBLs   Int?
  numberOfFreightedCopies        Int?
  numberOfUnfreightedOriginalBLs Int?
  numberOfUnfreightedCopies      Int?
  placeOfIssue            String?
  dateOfIssue             DateTime?
  freightPayableAtDetails String?
  freightTerms            String?
  currency                String?
  exchangeRate            Float?
  forwardingAgent         String?
  exportReference         String?
  notifyAddress           String?
  grossVolumeM3           Float?
  netVolumeM3             Float?
  outerPackingType        String?
  numberOfOuterPacking    Int?
  imoClass                String?
  unNumber                String?
  customsReference        String?
  sealNumbers             String?
  instructions            String?
  deliveryInstructions    String?
  remarksToCarrier        String?
  serviceContractNumber   String?
  bookingReference        String?
}


model BLDraftContainer {
  id                 String     @id @default(uuid())
  bLDraftId          String
  bLDraft            BLDraft    @relation(fields: [bLDraftId], references: [documentNo], onDelete: Cascade)
  cargoes            BLDraftCargo[]
  containerNumber    String
  sealNumber         String?
  sizeType           String?
  kindOfPackages     String?    // e.g., "pallets", "cartons"
  noOfPackages       Int?       // e.g., 10, 25, etc.
  descriptionOfGoods String?
  grossWeight        Float?
  grossWeightUnit    WeightUnit?
  netWeight          Float?
  netWeightUnit      WeightUnit?
  grossVolume        Float?
  grossVolumeUnit    VolumeUnit?
  netVolume          Float?
  netVolumeUnit      VolumeUnit?
  measurementsM3     Float?
  // ...add more if needed
}

model BLDraftCargo {
  id                  String           @id @default(cuid())
  containerId         String
  container           BLDraftContainer @relation(fields: [containerId], references: [id])
  description         String
  hsCode              String
  grossWeight         Float?
  grossVolume         Float?
  noOfPackages        Int?
  netWeight           Float?
  netVolume           Float?
  marksAndNumbers     String?          // <-- Add
  outerPacking        String?          // <-- Add
  sealNo              String?          // <-- Add
  sealNoOptional      String?          // <-- Add
  customerLoadReference String?        // <-- Add
  isDangerous         Boolean?         // Optional, for DG cargo
  unNumber            String?          // For DG cargo
  imoClass            String?          // For DG cargo
  packingGroup        String?          // For DG cargo
  // ...add other fields as required
}

model BLDraftVersion {
  id           String     @id @default(uuid())
  draftNo      String
  draft        BLDraft    @relation(fields: [draftNo], references: [documentNo], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  refunds                 Refunded[]

  createdById  String?
  createdBy    User?      @relation("DraftCreatedBy", fields: [createdById], references: [id])
  snapshot     Json 
  
}

model BLDraftComment {
  id           String     @id @default(uuid())
  draftNo      String
  draft        BLDraft    @relation(fields: [draftNo], references: [documentNo], onDelete: Cascade)

  commenterId  String
  commenter    User       @relation("DraftCommenter", fields: [commenterId], references: [id], onDelete: Cascade)

  text         String
  createdAt    DateTime   @default(now())
}

/// ─────────────────────────────────────────────────────────────────────────────
/// ANALYTICS STAR-SCHEMA
/// ─────────────────────────────────────────────────────────────────────────────

model DimDate {
  id            Int       @id @default(autoincrement())
  date          DateTime  @unique
  year          Int
  quarter       Int
  month         Int
  day           Int
  weekday       Int
  monthName     String
  createdAt     DateTime  @default(now())

  factContainerStatuses    FactContainerStatus[]
  factTradeLaneRevenues    FactTradeLaneRevenue[]
  factOnTimePerformances   FactOnTimePerformance[]
}

model DimPort {
  id            String    @id @default(uuid())
  unlocode      String    @unique
  name          String
  country       String
  createdAt     DateTime  @default(now())

  factTradeLaneRevenues  FactTradeLaneRevenue[] @relation("OriginLane")
  factDestLaneRevenues   FactTradeLaneRevenue[] @relation("DestLane")
}

model DimContainerType {
  type           String   @id
  createdAt      DateTime @default(now())

  factContainerStatuses   FactContainerStatus[]
  factTradeLaneRevenues   FactTradeLaneRevenue[]
}

model DimCarrier {
  id             String    @id @default(uuid())
  name           String
  scacCode       String    @unique
  createdAt      DateTime  @default(now())

  factTradeLaneRevenues   FactTradeLaneRevenue[]
  factOnTimePerformances  FactOnTimePerformance[]
}

model FactContainerStatus {
  id             String             @id @default(uuid())
  dateId         Int
  date           DimDate            @relation(fields: [dateId], references: [id])
  containerType  String
  type           DimContainerType   @relation(fields: [containerType], references: [type])
  status         ContainerStatus
  count          Int
}

model FactTradeLaneRevenue {
  id              String             @id @default(uuid())
  dateId          Int
  date            DimDate            @relation(fields: [dateId], references: [id])
  originPortId    String
  originPort      DimPort            @relation("OriginLane", fields: [originPortId], references: [id])
  destPortId      String
  destPort        DimPort            @relation("DestLane", fields: [destPortId], references: [id])
  containerType   String
  containerTypeRel DimContainerType  @relation(fields: [containerType], references: [type])
  carrierId       String
  carrier         DimCarrier         @relation(fields: [carrierId], references: [id])
  revenue         Decimal            @db.Decimal(14,2)
}

model FactOnTimePerformance {
  id             String            @id @default(uuid())
  dateId         Int
  date           DimDate           @relation(fields: [dateId], references: [id])
  carrierId      String
  carrier        DimCarrier        @relation(fields: [carrierId], references: [id])
  onTimePct      Decimal           @db.Decimal(5,2)
}
